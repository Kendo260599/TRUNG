// Professional Loading States and Progress Indicators class LoadingManager {constructor() {this.loadingOverlay =null; this.progressBar =null; this.init()}init() {this.createLoadingOverlay(); this.createProgressBar()}createLoadingOverlay() {const overlay =document.createElement('div'); overlay.id ='loading-overlay'; overlay.className ='fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 hidden'; overlay.innerHTML =` <div class="bg-white rounded-2xl p-8 shadow-2xl text-center max-w-sm mx-4"> <div class="w-12 h-12 border-4 border-feng-shui-gold border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> <h3 class="text-lg font-semibold text-gray-800 mb-2" id="loading-title">Đang xử lý...</h3> <p class="text-gray-600 text-sm" id="loading-message">Vui lòng đợi trong giây lát</p> </div> `; document.body.appendChild(overlay); this.loadingOverlay =overlay}createProgressBar() {const progressContainer =document.createElement('div'); progressContainer.id ='progress-container'; progressContainer.className ='fixed top-0 left-0 w-full h-1 bg-gray-200 z-50 hidden'; progressContainer.innerHTML =` <div id="progress-bar" class="h-full bg-gradient-to-r from-feng-shui-gold to-feng-shui-red transition-all duration-300" style="width:0%"></div> `; document.body.appendChild(progressContainer); this.progressBar =progressContainer}show(title ='Đang xử lý...',message ='Vui lòng đợi trong giây lát') {const titleEl =document.getElementById('loading-title'); const messageEl =document.getElementById('loading-message'); if (titleEl) titleEl.textContent =title; if (messageEl) messageEl.textContent =message; this.loadingOverlay.classList.remove('hidden'); this.loadingOverlay.classList.add('animate-fade-in')}hide() {this.loadingOverlay.classList.add('hidden'); this.loadingOverlay.classList.remove('animate-fade-in')}showProgress() {this.progressBar.classList.remove('hidden')}hideProgress() {this.progressBar.classList.add('hidden'); this.updateProgress(0)}updateProgress(percent) {const bar =document.getElementById('progress-bar'); if (bar) {bar.style.width =`${Math.min(100,Math.max(0,percent))}%`}}// Simulate progress for better UX simulateProgress(duration =2000) {return new Promise((resolve) => {this.showProgress(); let progress =0; const increment =100 / (duration / 50); const interval =setInterval(() => {progress +=increment; this.updateProgress(progress); if (progress >=100) {clearInterval(interval); setTimeout(() => {this.hideProgress(); resolve()},200)}},50)})}}// Professional Toast Notifications class ToastManager {constructor() {this.container =null; this.init()}init() {const container =document.createElement('div'); container.id ='toast-container'; container.className ='fixed top-4 right-4 z-50 space-y-2'; document.body.appendChild(container); this.container =container}show(message,type ='info',duration =3000) {const toast =document.createElement('div'); const icons ={success:'✅',error:'❌',warning:'⚠️',info:'ℹ️' }; const colors ={success:'bg-green-500',error:'bg-red-500',warning:'bg-yellow-500',info:'bg-blue-500' }; toast.className =`${colors[type]}text-white px-6 py-4 rounded-lg shadow-lg animate-slide-up max-w-sm`; toast.innerHTML =` <div class="flex items-center gap-3"> <span class="text-lg">${icons[type]}</span> <span class="font-medium">${message}</span> <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white/80 hover:text-white"> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path> </svg> </button> </div> `; this.container.appendChild(toast); // Auto remove after duration setTimeout(() => {if (toast.parentElement) {toast.style.animation ='fadeOut 0.3s ease-in-out'; setTimeout(() => toast.remove(),300)}},duration)}success(message,duration =3000) {this.show(message,'success',duration)}error(message,duration =4000) {this.show(message,'error',duration)}warning(message,duration =3500) {this.show(message,'warning',duration)}info(message,duration =3000) {this.show(message,'info',duration)}}// Initialize managers const loadingManager =new LoadingManager(); const toastManager =new ToastManager(); // Global loading functions for easy use window.showLoading =(title,message) => loadingManager.show(title,message); window.hideLoading =() => loadingManager.hide(); window.showProgress =() => loadingManager.showProgress(); window.hideProgress =() => loadingManager.hideProgress(); window.updateProgress =(percent) => loadingManager.updateProgress(percent); window.simulateProgress =(duration) => loadingManager.simulateProgress(duration); // Global toast functions window.showToast =(message,type,duration) => toastManager.show(message,type,duration); window.toastSuccess =(message,duration) => toastManager.success(message,duration); window.toastError =(message,duration) => toastManager.error(message,duration); window.toastWarning =(message,duration) => toastManager.warning(message,duration); window.toastInfo =(message,duration) => toastManager.info(message,duration); // Add CSS animations const animationStyles =` @keyframes fadeOut {from {opacity:1; transform:translateX(0)}to {opacity:0; transform:translateX(100px)}}.animate-slide-up {animation:slideUp 0.3s ease-out}.animate-fade-in {animation:fadeIn 0.3s ease-in-out}`; const styleSheet =document.createElement('style'); styleSheet.textContent =animationStyles; document.head.appendChild(styleSheet)