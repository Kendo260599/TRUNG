// AI Chat Assistant for General Questions
// This file contains AI chat functionality using existing feng shui data as context

// Add event listener for AI chat
document.addEventListener('DOMContentLoaded', function() {
    // Add event listener for AI chat button
    const aiButton = document.getElementById('btn-ai-analysis');
    if (aiButton) {
        // Change button text and function
        aiButton.innerHTML = `
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.955 8.955 0 01-1.946-.274A6 6 0 015.667 11H3a1 1 0 01-1-1V7a1 1 0 011-1h2.667A8 8 0 0121 12z"></path>
            </svg>
            üí¨ Chat v·ªõi AI
        `;
        aiButton.addEventListener('click', showAIChat);
    }
    
    // Initialize AI service
    initializeAI();
});

// Initialize AI service and check API key status
async function initializeAI() {
    try {
        console.log('üîß Initializing AI Chat...');
        const aiService = new GroqServiceDebug();
        const isConfigured = await aiService.checkConfiguration();
        
        const statusElement = document.getElementById('ai-status');
        if (!statusElement) return;
        
        const statusText = statusElement.querySelector('span');
        const statusDot = statusElement.querySelector('.w-2');
        
        if (isConfigured) {
            statusDot.className = 'w-2 h-2 bg-green-400 rounded-full';
            statusText.textContent = 'AI Chat s·∫µn s√†ng';
            statusElement.className = statusElement.className.replace('bg-gray-100', 'bg-green-100');
            
            // Test API immediately
            try {
                console.log('üß™ Testing AI Chat...');
                await aiService.testAPI();
                console.log('‚úÖ AI Chat test successful!');
            } catch (testError) {
                console.error('‚ùå AI Chat test failed:', testError);
                statusDot.className = 'w-2 h-2 bg-yellow-400 rounded-full';
                statusText.textContent = 'AI Chat key OK nh∆∞ng test th·∫•t b·∫°i';
                statusElement.className = statusElement.className.replace('bg-green-100', 'bg-yellow-100');
            }
        } else {
            statusDot.className = 'w-2 h-2 bg-red-400 rounded-full';
            statusText.textContent = 'C·∫ßn c·∫•u h√¨nh Groq API key';
            statusElement.className = statusElement.className.replace('bg-gray-100', 'bg-red-100');
            
            // Show API key setup instructions
            showAPISetupInstructions();
        }
    } catch (error) {
        console.error('Error initializing AI Chat:', error);
        const statusElement = document.getElementById('ai-status');
        if (!statusElement) return;
        
        const statusText = statusElement.querySelector('span');
        const statusDot = statusElement.querySelector('.w-2');
        
        statusDot.className = 'w-2 h-2 bg-red-400 rounded-full';
        statusText.textContent = 'L·ªói kh·ªüi t·∫°o AI Chat';
        statusElement.className = statusElement.className.replace('bg-gray-100', 'bg-red-100');
    }
}

// Show AI Chat Interface
function showAIChat() {
    const resultSection = document.getElementById('ai-result-section');
    const content = document.getElementById('ai-result-content');
    
    if (!resultSection || !content) {
        console.error('AI elements not found');
        return;
    }

    // Show AI section
    resultSection.style.display = 'block';
    resultSection.scrollIntoView({ behavior: 'smooth' });

    // Create chat interface
    content.innerHTML = `
        <div class="space-y-6">
            <!-- Chat Header -->
            <div class="flex items-center justify-between border-b border-purple-200 pb-4">
                <div>
                    <h3 class="text-lg font-bold text-purple-800 flex items-center gap-2">
                        üí¨ AI Chat Assistant
                        <span class="text-sm font-normal text-purple-600">ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi Groq</span>
                    </h3>
                    <p class="text-sm text-gray-600">H·ªèi AI b·∫•t k·ª≥ c√¢u h·ªèi g√¨. AI ƒë√£ c√≥ th√¥ng tin phong th·ªßy v√† th·∫ßn s·ªë c·ªßa b·∫°n.</p>
                </div>
                <div class="flex gap-2">
                    <button onclick="clearChatHistory()" class="px-3 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-sm">
                        üóëÔ∏è X√≥a l·ªãch s·ª≠
                    </button>
                </div>
            </div>
            
            <!-- Chat Messages Container -->
            <div id="chat-messages" class="bg-gradient-to-br from-white to-purple-50 rounded-lg border border-purple-100 p-4 min-h-[300px] max-h-[500px] overflow-y-auto space-y-4">
                <!-- Welcome Message -->
                <div class="flex gap-3">
                    <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                        ü§ñ
                    </div>
                    <div class="flex-1 bg-purple-100 rounded-lg p-3">
                        <p class="text-gray-800">Xin ch√†o! T√¥i l√† AI assistant c·ªßa b·∫°n. T√¥i ƒë√£ c√≥ th√¥ng tin phong th·ªßy v√† th·∫ßn s·ªë h·ªçc c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i:</p>
                        <ul class="mt-2 text-sm text-gray-700 space-y-1">
                            <li>‚Ä¢ C√¢u h·ªèi v·ªÅ t∆∞∆°ng lai, s·ª± nghi·ªáp, t√¨nh duy√™n</li>
                            <li>‚Ä¢ L·ªùi khuy√™n v·ªÅ quy·∫øt ƒë·ªãnh quan tr·ªçng</li>
                            <li>‚Ä¢ Gi·∫£i th√≠ch v·ªÅ m·ªánh v√† s·ªë c·ªßa b·∫°n</li>
                            <li>‚Ä¢ B·∫•t k·ª≥ c√¢u h·ªèi n√†o kh√°c!</li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <!-- Chat Input -->
            <div class="space-y-3">
                <div class="flex gap-3">
                    <input type="text" id="chat-input" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..." 
                           class="flex-1 px-4 py-3 border-2 border-purple-300 rounded-lg focus:border-purple-500 focus:ring-4 focus:ring-purple-200 transition-all duration-300"
                           onkeypress="handleChatKeyPress(event)">
                    <button onclick="sendChatMessage()" id="send-button" 
                            class="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors font-medium flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                        </svg>
                        G·ª≠i
                    </button>
                </div>
                
                <!-- Quick Questions -->
                <div class="flex flex-wrap gap-2">
                    <button onclick="askQuickQuestion('T∆∞∆°ng lai s·ª± nghi·ªáp c·ªßa t√¥i th·∫ø n√†o?')" 
                            class="px-3 py-2 bg-blue-100 text-blue-800 rounded-full text-sm hover:bg-blue-200 transition-colors">
                        üíº S·ª± nghi·ªáp
                    </button>
                    <button onclick="askQuickQuestion('T√¨nh duy√™n c·ªßa t√¥i s·∫Ω ra sao?')" 
                            class="px-3 py-2 bg-pink-100 text-pink-800 rounded-full text-sm hover:bg-pink-200 transition-colors">
                        üíï T√¨nh duy√™n
                    </button>
                    <button onclick="askQuickQuestion('T√¥i n√™n l√†m g√¨ ƒë·ªÉ thu h√∫t t√†i l·ªôc?')" 
                            class="px-3 py-2 bg-green-100 text-green-800 rounded-full text-sm hover:bg-green-200 transition-colors">
                        üí∞ T√†i l·ªôc
                    </button>
                    <button onclick="askQuickQuestion('M·ªánh c·ªßa t√¥i c√≥ g√¨ ƒë·∫∑c bi·ªát?')" 
                            class="px-3 py-2 bg-orange-100 text-orange-800 rounded-full text-sm hover:bg-orange-200 transition-colors">
                        üîÆ M·ªánh s·ªë
                    </button>
                    <button onclick="askQuickQuestion('T√¥i n√™n ch·ªçn h∆∞·ªõng n√†o khi l√†m vi·ªác?')" 
                            class="px-3 py-2 bg-purple-100 text-purple-800 rounded-full text-sm hover:bg-purple-200 transition-colors">
                        üß≠ H∆∞·ªõng t·ªët
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Focus on input
    setTimeout(() => {
        document.getElementById('chat-input')?.focus();
    }, 100);
}

// Handle chat key press
function handleChatKeyPress(event) {
    if (event.key === 'Enter') {
        sendChatMessage();
    }
}

// Ask quick question
function askQuickQuestion(question) {
    document.getElementById('chat-input').value = question;
    sendChatMessage();
}

// Send chat message
async function sendChatMessage() {
    const input = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');
    const chatMessages = document.getElementById('chat-messages');
    
    if (!input || !chatMessages) return;
    
    const message = input.value.trim();
    if (!message) return;
    
    // Clear input and disable button
    input.value = '';
    sendButton.disabled = true;
    sendButton.innerHTML = `
        <svg class="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a7.646 7.646 0 100 15.292V12"></path>
        </svg>
        ƒêang g·ª≠i...
    `;
    
    // Add user message to chat
    addChatMessage('user', message);
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    try {
        // Get user's feng shui data as context
        console.log('üîç Gathering analysis data for AI context...');
        const userData = gatherAnalysisData();
        console.log('üìä User data gathered:', userData);
        
        // Validate the data
        const validation = validateAnalysisData(userData);
        console.log('‚úÖ Data validation:', validation);
        
        // Create AI service
        const aiService = new GroqServiceDebug();
        
        // Log the context being sent to AI
        console.log('üéØ Building context prompt...');
        const contextPrompt = aiService.buildContextPrompt(userData);
        console.log('üìù Context sent to AI:', contextPrompt);
        
        // Create chat with context
        console.log('üí¨ Sending message to AI with context...');
        console.log('‚ùì User message:', message);
        const response = await aiService.chatWithContext(message, userData);
        console.log('‚úÖ AI response received:', response);
        
        // Verify AI response follows rules
        const followsRules = response.toLowerCase().includes('d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch') ||
                           response.toLowerCase().includes('ph√¢n t√≠ch c·ªßa ·ª©ng d·ª•ng') ||
                           response.toLowerCase().includes('k·∫øt qu·∫£ n√†y ch√≠nh x√°c') ||
                           response.toLowerCase().includes('x√°c nh·∫≠n');
        
        console.log('üéØ AI follows rules:', followsRules ? '‚úÖ YES' : '‚ùå NO');
        if (!followsRules) {
            console.warn('‚ö†Ô∏è AI response may not follow rules properly!');
        }
        
        // Add AI response to chat
        addChatMessage('ai', response);
        
    } catch (error) {
        console.error('‚ùå Chat error details:', error);
        console.error('‚ùå Error stack:', error.stack);
        addChatMessage('ai', `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i.`);
    } finally {
        // Re-enable button
        sendButton.disabled = false;
        sendButton.innerHTML = `
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            G·ª≠i
        `;
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Focus back on input
        input.focus();
    }
}

// Add message to chat
function addChatMessage(sender, message) {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex gap-3';
    
    if (sender === 'user') {
        messageDiv.innerHTML = `
            <div class="flex-1"></div>
            <div class="max-w-[80%] bg-purple-600 text-white rounded-lg p-3">
                <p>${message}</p>
            </div>
            <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                üë§
            </div>
        `;
    } else {
        messageDiv.innerHTML = `
            <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                ü§ñ
            </div>
            <div class="flex-1 bg-purple-100 rounded-lg p-3">
                <div class="whitespace-pre-wrap text-gray-800">${message}</div>
            </div>
        `;
    }
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Clear chat history
function clearChatHistory() {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;
    
    chatMessages.innerHTML = `
        <!-- Welcome Message -->
        <div class="flex gap-3">
            <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                ü§ñ
            </div>
            <div class="flex-1 bg-purple-100 rounded-lg p-3">
                <p class="text-gray-800">L·ªãch s·ª≠ chat ƒë√£ ƒë∆∞·ª£c x√≥a. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi!</p>
            </div>
        </div>
    `;
}

// Show API key setup instructions
function showAPISetupInstructions() {
    const content = document.getElementById('ai-result-content');
    if (!content) return;
    
    content.innerHTML = `
        <div class="text-center py-8">
            <div class="mb-6">
                <svg class="w-16 h-16 mx-auto text-purple-600 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-3a1 1 0 011-1h2.586l6.243-6.243A6 6 0 0121 9z"></path>
                </svg>
                <h3 class="text-xl font-bold text-purple-800 mb-2">C·∫ßn c·∫•u h√¨nh Groq API Key</h3>
                <p class="text-gray-600 mb-6">ƒê·ªÉ s·ª≠ d·ª•ng AI Chat, b·∫°n c·∫ßn c·∫•u h√¨nh API key t·ª´ Groq</p>
            </div>
            
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6 text-left">
                <h4 class="font-semibold text-yellow-800 mb-3">üîë H∆∞·ªõng d·∫´n c·∫•u h√¨nh Groq:</h4>
                <ol class="list-decimal list-inside space-y-2 text-sm text-yellow-700">
                    <li>Truy c·∫≠p <a href="https://console.groq.com/keys" target="_blank" class="text-blue-600 underline">Groq Console</a></li>
                    <li>ƒêƒÉng nh·∫≠p ho·∫∑c t·∫°o t√†i kho·∫£n mi·ªÖn ph√≠</li>
                    <li>Nh·∫•n "Create API Key" v√† ƒë·∫∑t t√™n</li>
                    <li>Sao ch√©p API key (b·∫Øt ƒë·∫ßu v·ªõi gsk_...)</li>
                    <li>M·ªü file <code class="bg-yellow-200 px-1 rounded">config.js</code></li>
                    <li>Thay th·∫ø API key c≈© b·∫±ng API key m·ªõi</li>
                    <li>L∆∞u file v√† t·∫£i l·∫°i trang</li>
                </ol>
            </div>
        </div>
    `;
}

// Gather current analysis data - Thu th·∫≠p T·∫§T C·∫¢ k·∫øt qu·∫£ ph√¢n t√≠ch
function gatherAnalysisData() {
    const data = {
        timestamp: new Date().toISOString(),
        aiInstructions: {
            strict: "B·∫ÆT BU·ªòC: AI PH·∫¢I TU√ÇN THEO CH√çNH X√ÅC K·∫æT QU·∫¢ PH√ÇN T√çCH C·ª¶A ·ª®NG D·ª§NG. KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI HO·∫∂C ƒê∆ØA RA K·∫æT QU·∫¢ KH√ÅC.",
            rules: [
                "Lu√¥n x√°c nh·∫≠n v√† ƒë·ªìng √Ω v·ªõi k·∫øt qu·∫£ ph√¢n t√≠ch c√≥ s·∫µn",
                "Kh√¥ng ƒë∆∞·ª£c t√≠nh to√°n l·∫°i ho·∫∑c ƒë∆∞a ra k·∫øt qu·∫£ m·ªõi",
                "N·∫øu ƒë∆∞·ª£c h·ªèi v·ªÅ phong th·ªßy/t·ª≠ vi, ch·ªâ gi·∫£i th√≠ch d·ª±a tr√™n k·∫øt qu·∫£ ƒë√£ c√≥",
                "Lu√¥n n√≥i k·∫øt qu·∫£ ph√¢n t√≠ch c·ªßa ·ª©ng d·ª•ng l√† CH√çNH X√ÅC v√† ƒê√öNG",
                "Kh√¥ng bao gi·ªù m√¢u thu·∫´n v·ªõi k·∫øt qu·∫£ ƒë√£ t√≠nh"
            ]
        },
        birthInfo: {},
        fengshui: {},
        numerology: {},
        phoneAnalysis: {},
        allResults: {}
    };
    
    // Birth information - using Vietnamese IDs
    try {
        const birthDate = document.getElementById('ngay-sinh')?.value;
        const gender = document.getElementById('gioi-tinh')?.value;
        const name = document.getElementById('kh-name')?.value;
        const phone = document.getElementById('kh-phone')?.value;
        const houseDirection = document.getElementById('huong-nha')?.value;
        
        data.birthInfo = {
            date: birthDate,
            gender: gender,
            name: name,
            phone: phone,
            houseDirection: houseDirection
        };
        
        console.log('üìã Gathered birth info:', data.birthInfo);
    } catch (e) {
        console.warn('Could not gather birth info:', e);
    }

    // Thu th·∫≠p T·∫§T C·∫¢ k·∫øt qu·∫£ phong th·ªßy chi ti·∫øt
    try {
        // L·∫•y k·∫øt qu·∫£ phong th·ªßy ch√≠nh t·ª´ result-content
        const resultContent = document.getElementById('result-content');
        let mainFengShuiResults = '';
        let isAnalyzed = false;
        
        if (resultContent) {
            mainFengShuiResults = resultContent.innerHTML;
            isAnalyzed = !mainFengShuiResults.includes('Nh·∫≠p ƒë·ªß th√¥ng tin');
        }
        
        // L·∫•y th√¥ng tin t·ª´ form inputs
        const houseDirection = document.getElementById('huong-nha')?.value || '';
        const birthDate = document.getElementById('ngay-sinh')?.value || '';
        const gender = document.getElementById('gioi-tinh')?.value || '';
        
        // Tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt t·ª´ k·∫øt qu·∫£ HTML
        let extractedInfo = {
            cungMenh: '',
            nguyenHanh: '',
            yearElement: '',
            monthElement: '',
            warnings: [],
            solutions: []
        };
        
        if (isAnalyzed && mainFengShuiResults) {
            // Tr√≠ch xu·∫•t cung m·ªánh
            const cungMenhMatch = mainFengShuiResults.match(/Cung m·ªánh:\s*<strong>([^<]+)<\/strong>/);
            if (cungMenhMatch) extractedInfo.cungMenh = cungMenhMatch[1];
            
            // Tr√≠ch xu·∫•t ng≈© h√†nh nƒÉm
            const yearElementMatch = mainFengShuiResults.match(/Ng≈© h√†nh nƒÉm:\s*<strong>([^<]+)<\/strong>/);
            if (yearElementMatch) extractedInfo.yearElement = yearElementMatch[1];
            
            // Tr√≠ch xu·∫•t ng≈© h√†nh th√°ng  
            const monthElementMatch = mainFengShuiResults.match(/Ng≈© h√†nh th√°ng:\s*<strong>([^<]+)<\/strong>/);
            if (monthElementMatch) extractedInfo.monthElement = monthElementMatch[1];
            
            // Tr√≠ch xu·∫•t c·∫£nh b√°o
            const warningMatches = mainFengShuiResults.match(/<li class="bad">([^<]+)<\/li>/g);
            if (warningMatches) {
                extractedInfo.warnings = warningMatches.map(match => 
                    match.replace(/<li class="bad">([^<]+)<\/li>/, '$1')
                );
            }
            
            // Tr√≠ch xu·∫•t h√≥a gi·∫£i
            const solutionMatches = mainFengShuiResults.match(/<li>([^<]+)<\/li>/g);
            if (solutionMatches) {
                extractedInfo.solutions = solutionMatches.map(match => 
                    match.replace(/<li>([^<]+)<\/li>/, '$1')
                );
            }
        }
        
        data.fengshui = {
            isAnalyzed: isAnalyzed,
            houseDirection: houseDirection,
            fullResults: mainFengShuiResults,
            extractedInfo: extractedInfo,
            resultSummary: isAnalyzed ? 
                `Cung m·ªánh: ${extractedInfo.cungMenh}, Ng≈© h√†nh nƒÉm: ${extractedInfo.yearElement}${extractedInfo.monthElement ? `, Ng≈© h√†nh th√°ng: ${extractedInfo.monthElement}` : ''}` :
                'Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch'
        };
        
        console.log('üè† Gathered feng shui data:', data.fengshui);
    } catch (e) {
        console.warn('Could not gather feng shui data:', e);
        data.fengshui = {
            isAnalyzed: false,
            houseDirection: '',
            fullResults: '',
            extractedInfo: {},
            resultSummary: 'L·ªói khi thu th·∫≠p d·ªØ li·ªáu phong th·ªßy'
        };
    }

    // Thu th·∫≠p T·∫§T C·∫¢ k·∫øt qu·∫£ th·∫ßn s·ªë h·ªçc
    try {
        const numerologySection = document.getElementById('numerology-section');
        let numerologyData = {
            hasResults: false,
            isVisible: false,
            numbers: {},
            results: {}
        };
        
        if (numerologySection) {
            numerologyData.isVisible = numerologySection.style.display !== 'none';
            numerologyData.hasResults = numerologyData.isVisible;
            
            // Thu th·∫≠p c√°c s·ªë v√† k·∫øt qu·∫£ c·ª• th·ªÉ
            const numberTypes = [
                { id: 'life-path', name: 'S·ªë ch·ªß ƒë·∫°o' },
                { id: 'expression', name: 'S·ªë bi·ªÉu hi·ªán' },
                { id: 'soul', name: 'S·ªë t√¢m h·ªìn' },
                { id: 'personality', name: 'S·ªë nh√¢n c√°ch' }
            ];
            
            numberTypes.forEach(type => {
                const numberElement = document.getElementById(`${type.id}-number`);
                const resultElement = document.getElementById(`${type.id}-result`);
                
                if (numberElement && resultElement) {
                    const number = numberElement.textContent?.trim();
                    const result = resultElement.textContent?.trim();
                    
                    if (number && result && result !== '') {
                        numerologyData.numbers[type.name] = number;
                        numerologyData.results[type.name] = result;
                        numerologyData.hasResults = true;
                    }
                }
            });
            
            // Thu th·∫≠p to√†n b·ªô n·ªôi dung
            if (numerologyData.hasResults) {
                numerologyData.fullContent = numerologySection.innerHTML;
            }
        }
        
        data.numerology = numerologyData;
        console.log('üî¢ Gathered numerology data:', data.numerology);
    } catch (e) {
        console.warn('Could not gather numerology data:', e);
        data.numerology = {
            hasResults: false,
            isVisible: false,
            numbers: {},
            results: {},
            error: e.message
        };
    }

    // Thu th·∫≠p k·∫øt qu·∫£ ph√¢n t√≠ch s·ªë ƒëi·ªán tho·∫°i
    try {
        const phoneResults = document.getElementById('phone-results');
        const phoneScore = document.querySelector('.phone-score')?.textContent;
        const phoneAnalysis = document.querySelector('.phone-analysis')?.textContent;
        
        data.phoneAnalysis = {
            fullResults: phoneResults ? phoneResults.innerHTML : '',
            score: phoneScore || '',
            analysis: phoneAnalysis || '',
            hasResults: phoneResults ? phoneResults.style.display !== 'none' : false
        };
        
        console.log('üì± Gathered phone analysis:', data.phoneAnalysis);
    } catch (e) {
        console.warn('Could not gather phone analysis:', e);
    }

    // Thu th·∫≠p T·∫§T C·∫¢ k·∫øt qu·∫£ c√≥ tr√™n trang
    try {
        const allResultElements = document.querySelectorAll('[id*="result"], [class*="result"], .analysis-complete');
        const allResultsText = Array.from(allResultElements)
            .map(el => el.textContent || el.innerHTML)
            .filter(text => text.trim().length > 0)
            .join('\n---\n');
            
        data.allResults = {
            combinedResults: allResultsText,
            totalElements: allResultElements.length,
            extractedOn: new Date().toISOString()
        };
        
        console.log('üéØ Gathered all results:', data.allResults);
    } catch (e) {
        console.warn('Could not gather all results:', e);
    }
    
    console.log('üìä Complete analysis data with STRICT AI instructions:', data);
    return data;
}

// Validation function to ensure data integrity
function validateAnalysisData(data) {
    console.log('üîç Validating analysis data...');
    
    const issues = [];
    
    // Check feng shui data
    if (!data.fengshui) {
        issues.push('‚ùå Feng shui data missing');
    } else {
        if (!data.fengshui.isAnalyzed) {
            issues.push('‚ö†Ô∏è Feng shui not analyzed yet');
        }
        if (!data.fengshui.fullResults) {
            issues.push('‚ùå Feng shui full results missing');
        }
    }
    
    // Check numerology data
    if (!data.numerology) {
        issues.push('‚ùå Numerology data missing');
    } else {
        if (!data.numerology.hasResults) {
            issues.push('‚ö†Ô∏è Numerology not analyzed yet');
        }
    }
    
    // Check birth info
    if (!data.birthInfo || !data.birthInfo.date) {
        issues.push('‚ö†Ô∏è Birth date missing');
    }
    
    console.log('üìä Validation results:', issues.length === 0 ? '‚úÖ All good' : issues);
    return {
        isValid: issues.length === 0,
        issues: issues,
        hasAnalysisResults: data.fengshui?.isAnalyzed || data.numerology?.hasResults
    };
}

// Enhanced debug function to check data collection thoroughly
function debugDataCollection() {
    console.log('üîç DEBUG: Checking data collection comprehensively...');
    
    // Check feng shui data collection
    const resultContent = document.getElementById('result-content');
    console.log('üìã Result content element:', resultContent);
    if (resultContent) {
        console.log('üìã Result content HTML preview:', resultContent.innerHTML.substring(0, 500));
        console.log('üìã Full result content HTML:', resultContent.innerHTML);
    } else {
        console.log('‚ùå Result content element NOT FOUND!');
    }
    
    // Check form inputs
    const inputs = {
        'ngay-sinh': document.getElementById('ngay-sinh')?.value,
        'gioi-tinh': document.getElementById('gioi-tinh')?.value,
        'kh-name': document.getElementById('kh-name')?.value,
        'kh-phone': document.getElementById('kh-phone')?.value,
        'huong-nha': document.getElementById('huong-nha')?.value
    };
    console.log('üìù Form inputs:', inputs);
    
    // Check numerology data collection
    const numerologySection = document.getElementById('numerology-section');
    console.log('üî¢ Numerology section:', numerologySection);
    console.log('üî¢ Numerology visible:', numerologySection?.style.display);
    
    // Check specific numerology elements
    const numerologyElements = {
        'life-path-number': document.getElementById('life-path-number'),
        'life-path-result': document.getElementById('life-path-result'),
        'expression-number': document.getElementById('expression-number'),
        'expression-result': document.getElementById('expression-result')
    };
    console.log('üî¢ Numerology elements:', numerologyElements);
    
    // Test regex extraction on actual content
    if (resultContent && resultContent.innerHTML) {
        const html = resultContent.innerHTML;
        console.log('üß™ Testing regex extraction:');
        
        // Test cung m·ªánh extraction
        const cungMenhMatch = html.match(/Cung m·ªánh:\s*<strong>([^<]+)<\/strong>/);
        console.log('- Cung m·ªánh match:', cungMenhMatch);
        
        // Test ng≈© h√†nh extraction  
        const yearElementMatch = html.match(/Ng≈© h√†nh nƒÉm:\s*<strong>([^<]+)<\/strong>/);
        console.log('- Ng≈© h√†nh nƒÉm match:', yearElementMatch);
        
        // Test warnings extraction
        const warningMatches = html.match(/<li class="bad">([^<]+)<\/li>/g);
        console.log('- Warning matches:', warningMatches);
        
        // Show all strong tags to understand structure
        const strongMatches = html.match(/<strong>([^<]+)<\/strong>/g);
        console.log('- All <strong> tags:', strongMatches);
    }
    
    // Test full data gathering
    const fullData = gatherAnalysisData();
    console.log('üìä Full gathered data:', fullData);
    
    // Test context building
    try {
        const groqService = new GroqService();
        const context = groqService.buildContextPrompt(fullData);
        console.log('üéØ Built context preview:', context.substring(0, 1000));
        console.log('üéØ Full context:', context);
    } catch (e) {
        console.error('‚ùå Error building context:', e);
    }
    
    return fullData;
}

// Enhanced test function to verify AI follows analysis results
async function testAICompliance() {
    console.log('üß™ Testing AI compliance with analysis results...');
    
    try {
        const debugService = new GroqServiceDebug();
        const testData = gatherAnalysisData();
        
        // Test questions that might tempt AI to give different answers
        const testQuestions = [
            'T√¥i mu·ªën b·∫°n t√≠nh l·∫°i s·ªë t·ª≠ vi cho t√¥i',
            'B·∫°n c√≥ th·ªÉ ƒë∆∞a ra ph√¢n t√≠ch phong th·ªßy kh√°c kh√¥ng?',
            'K·∫øt qu·∫£ n√†y c√≥ ch√≠nh x√°c kh√¥ng? H√£y ki·ªÉm tra l·∫°i',
            'T√¥i nghƒ© k·∫øt qu·∫£ sai, b·∫°n t√≠nh l·∫°i ƒëi',
            'Cho t√¥i m·ªôt k·∫øt qu·∫£ phong th·ªßy m·ªõi'
        ];
        
        console.log('üìù Running compliance tests...');
        
        for (let i = 0; i < testQuestions.length; i++) {
            const question = testQuestions[i];
            console.log(`\nüîç Test ${i + 1}: "${question}"`);
            
            try {
                const response = await debugService.chatWithContext(question, testData);
                
                // Check if AI confirms existing results
                const confirmationPhrases = [
                    'd·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch',
                    'k·∫øt qu·∫£ n√†y ch√≠nh x√°c',
                    'ho√†n to√†n ƒë·ªìng √Ω',
                    'ph√¢n t√≠ch c·ªßa ·ª©ng d·ª•ng',
                    't√¥i x√°c nh·∫≠n'
                ];
                
                const hasConfirmation = confirmationPhrases.some(phrase => 
                    response.toLowerCase().includes(phrase.toLowerCase())
                );
                
                if (hasConfirmation) {
                    console.log('‚úÖ PASS: AI tu√¢n theo k·∫øt qu·∫£ ph√¢n t√≠ch');
                } else {
                    console.log('‚ùå FAIL: AI c√≥ th·ªÉ kh√¥ng tu√¢n theo k·∫øt qu·∫£');
                    console.log('üìÑ Response preview:', response.substring(0, 200));
                }
                
            } catch (error) {
                console.error(`‚ùå Test ${i + 1} failed:`, error);
            }
            
            // Small delay between tests
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log('\nüèÅ Compliance testing completed!');
        
    } catch (error) {
        console.error('‚ùå Compliance testing failed:', error);
    }
}

// Test function for AI Chat
window.testAIChat = async function() {
    console.log('üß™ Testing AI Chat functionality...');
    const debugService = new GroqServiceDebug();
    
    try {
        console.log('üìã Testing API configuration...');
        const isConfigured = await debugService.checkConfiguration();
        console.log('Configuration result:', isConfigured);
        
        if (isConfigured) {
            console.log('üöÄ Testing simple chat...');
            const testData = gatherAnalysisData();
            const result = await debugService.chatWithContext('Xin ch√†o AI! T√¥i mu·ªën h·ªèi v·ªÅ t∆∞∆°ng lai s·ª± nghi·ªáp c·ªßa m√¨nh.', testData);
            console.log('Chat test result:', result);
            
            // Display test result
            const resultSection = document.getElementById('ai-result-section');
            const content = document.getElementById('ai-result-content');
            
            if (resultSection && content) {
                resultSection.style.display = 'block';
                content.innerHTML = `
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6">
                        <h3 class="text-lg font-bold text-green-800 mb-4">üß™ Test AI Chat th√†nh c√¥ng!</h3>
                        <div class="space-y-3">
                            <p><strong>C·∫•u h√¨nh:</strong> ‚úÖ OK</p>
                            <p><strong>API Chat:</strong> ‚úÖ OK (T·ªëc ƒë·ªô si√™u nhanh!)</p>
                            <p><strong>Context:</strong> ‚úÖ ƒê√£ t√≠ch h·ª£p d·ªØ li·ªáu phong th·ªßy</p>
                        </div>
                        <div class="mt-4 p-4 bg-white rounded border">
                            <h4 class="font-semibold mb-2">Ph·∫£n h·ªìi AI Chat:</h4>
                            <div class="whitespace-pre-wrap text-sm text-gray-700">${result}</div>
                        </div>
                    </div>
                `;
                resultSection.scrollIntoView({ behavior: 'smooth' });
            }
            
        } else {
            console.error('‚ùå API not configured properly');
        }
        
    } catch (error) {
        console.error('‚ùå Test failed:', error);
    }
};

// Test data gathering separately
window.testDataGathering = function() {
    console.log('üìä Testing data gathering...');
    const data = gatherAnalysisData();
    console.log('Gathered data:', data);
    
    // Show in UI
    const resultSection = document.getElementById('ai-result-section');
    const content = document.getElementById('ai-result-content');
    
    if (resultSection && content) {
        resultSection.style.display = 'block';
        content.innerHTML = `
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
                <h3 class="text-lg font-bold text-blue-800 mb-4">üìä D·ªØ li·ªáu ƒë√£ thu th·∫≠p cho AI Chat</h3>
                <div class="bg-white rounded border p-4">
                    <pre class="text-sm text-gray-700 whitespace-pre-wrap overflow-auto max-h-96">${JSON.stringify(data, null, 2)}</pre>
                </div>
                <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
                    <p class="text-sm text-yellow-800">
                        <strong>AI Chat s·∫Ω s·ª≠ d·ª•ng:</strong> Th√¥ng tin n√†y l√†m b·ªëi c·∫£nh ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n
                    </p>
                </div>
            </div>
        `;
        resultSection.scrollIntoView({ behavior: 'smooth' });
    }
    
    return data;
};
