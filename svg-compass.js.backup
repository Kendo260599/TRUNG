// SVG Compass Controller for Feng Shui Application
class SVGCompass {
  constructor() {
    this.currentHeading = 0;
    this.offset = 0;
    this.isActive = false;
    this.needle = document.getElementById('compass-needle');
    this.currentDirectionDisplay = document.getElementById('current-direction-svg');
    this.currentSectorDisplay = document.getElementById('current-sector-svg');
    this.compassDirSpan = document.getElementById('compass-dir');
    this.compassDegSpan = document.getElementById('compass-deg');
    this.compassTrigramSpan = document.getElementById('compass-trigram');
    this.compassElementSpan = document.getElementById('compass-element');
    this.compassMeaningSpan = document.getElementById('compass-meaning');
    this.mainDestinyDisplay = document.getElementById('main-destiny');
    this.offsetInput = document.getElementById('compass-offset');
    this.statusDiv = document.getElementById('compass-status');
    
    // Bagua sector definitions (exact 45° divisions)
    this.baguaSectors = [
      { name: 'KHẢM', trigram: '☵', element: 'Thủy', meaning: 'Nghiệp', start: 337.5, end: 22.5, direction: 'Bắc' },
      { name: 'CẤN', trigram: '☶', element: 'Thổ', meaning: 'Tri thức', start: 22.5, end: 67.5, direction: 'Đông Bắc' },
      { name: 'CHẤN', trigram: '☳', element: 'Mộc', meaning: 'Gia đình', start: 67.5, end: 112.5, direction: 'Đông' },
      { name: 'TỐN', trigram: '☴', element: 'Mộc', meaning: 'Tài lộc', start: 112.5, end: 157.5, direction: 'Đông Nam' },
      { name: 'LY', trigram: '☲', element: 'Hỏa', meaning: 'Danh tiếng', start: 157.5, end: 202.5, direction: 'Nam' },
      { name: 'KHÔN', trigram: '☷', element: 'Thổ', meaning: 'Tình duyên', start: 202.5, end: 247.5, direction: 'Tây Nam' },
      { name: 'ĐOÀI', trigram: '☱', element: 'Kim', meaning: 'Con cái', start: 247.5, end: 292.5, direction: 'Tây' },
      { name: 'CÀN', trigram: '☰', element: 'Kim', meaning: 'Quý nhân', start: 292.5, end: 337.5, direction: 'Tây Bắc' }
    ];
    
    this.init();
  }
  
  init() {
    // Set up event listeners
    if (this.offsetInput) {
      this.offsetInput.addEventListener('input', (e) => {
        this.offset = parseFloat(e.target.value) || 0;
        this.updateDisplay();
      });
    }
    
    // Add click handlers for bagua sectors
    this.setupSectorInteractions();
    
    // Initialize display
    this.updateDisplay();
  }
  
  setupSectorInteractions() {
    const sectors = document.querySelectorAll('.bagua-sector');
    sectors.forEach(sector => {
      sector.addEventListener('click', () => {
        const trigram = sector.getAttribute('data-trigram');
        this.selectSector(trigram);
      });
      
      sector.addEventListener('mouseenter', () => {
        sector.style.transform = 'scale(1.05)';
        sector.style.transformOrigin = '200px 200px';
      });
      
      sector.addEventListener('mouseleave', () => {
        sector.style.transform = 'scale(1)';
      });
    });
  }
  
  selectSector(trigramKey) {
    const sector = this.baguaSectors.find(s => this.getTrigramKey(s.name) === trigramKey);
    if (sector) {
      // Calculate middle angle of the sector
      let angle = (sector.start + sector.end) / 2;
      if (sector.start > sector.end) { // Handle North sector crossing 0°
        angle = (sector.start + sector.end + 360) / 2;
        if (angle > 360) angle -= 360;
      }
      
      this.currentHeading = angle;
      this.updateDisplay();
      
      // Update main destiny
      if (this.mainDestinyDisplay) {
        this.mainDestinyDisplay.textContent = sector.name;
      }
    }
  }
  
  getTrigramKey(sectorName) {
    const keyMap = {
      'KHẢM': 'kan',
      'CẤN': 'gen', 
      'CHẤN': 'zhen',
      'TỐN': 'xun',
      'LY': 'li',
      'KHÔN': 'kun',
      'ĐỐI': 'dui',
      'CÀN': 'qian'
    };
    return keyMap[sectorName] || '';
  }
  
  getCurrentSector() {
    const adjustedHeading = (this.currentHeading + this.offset + 360) % 360;
    
    for (let sector of this.baguaSectors) {
      if (this.isAngleInSector(adjustedHeading, sector.start, sector.end)) {
        return sector;
      }
    }
    
    return this.baguaSectors[0]; // Default to North
  }
  
  isAngleInSector(angle, start, end) {
    if (start <= end) {
      return angle >= start && angle <= end;
    } else {
      // Handle sectors crossing 0° (like North)
      return angle >= start || angle <= end;
    }
  }
  
  updateDisplay() {
    const adjustedHeading = (this.currentHeading + this.offset + 360) % 360;
    const currentSector = this.getCurrentSector();
    
    // Update needle rotation
    if (this.needle) {
      this.needle.style.transform = `rotate(${adjustedHeading}deg)`;
    }
    
    // Update SVG displays
    if (this.currentDirectionDisplay) {
      this.currentDirectionDisplay.textContent = `${Math.round(adjustedHeading)}° ${currentSector.direction}`;
    }
    
    if (this.currentSectorDisplay) {
      this.currentSectorDisplay.textContent = `Cung ${currentSector.name}`;
    }
    
    // Update info panel
    if (this.compassDirSpan) {
      this.compassDirSpan.textContent = currentSector.direction;
    }
    
    if (this.compassDegSpan) {
      this.compassDegSpan.textContent = Math.round(adjustedHeading);
    }
    
    if (this.compassTrigramSpan) {
      this.compassTrigramSpan.textContent = `${currentSector.name} ${currentSector.trigram}`;
    }
    
    if (this.compassElementSpan) {
      this.compassElementSpan.textContent = currentSector.element;
    }
    
    if (this.compassMeaningSpan) {
      this.compassMeaningSpan.textContent = currentSector.meaning;
    }
  }
  
  start() {
    if ('DeviceOrientationEvent' in window) {
      this.isActive = true;
      this.updateStatus('La bàn đang hoạt động...');
      
      // Request permission for iOS 13+
      if (typeof DeviceOrientationEvent.requestPermission === 'function') {
        DeviceOrientationEvent.requestPermission()
          .then(permissionState => {
            if (permissionState === 'granted') {
              window.addEventListener('deviceorientation', this.handleOrientation.bind(this));
              this.updateStatus('La bàn hoạt động. Xoay thiết bị để đo hướng.');
            } else {
              this.updateStatus('Cần cấp quyền truy cập la bàn');
            }
          })
          .catch(() => {
            this.updateStatus('Không thể truy cập la bàn trên thiết bị này');
          });
      } else {
        // For other browsers
        window.addEventListener('deviceorientation', this.handleOrientation.bind(this));
        this.updateStatus('La bàn hoạt động. Xoay thiết bị để đo hướng.');
      }
    } else {
      this.updateStatus('Thiết bị không hỗ trợ la bàn');
    }
  }
  
  stop() {
    this.isActive = false;
    window.removeEventListener('deviceorientation', this.handleOrientation.bind(this));
    this.updateStatus('La bàn đã dừng');
  }
  
  handleOrientation(event) {
    if (!this.isActive) return;
    
    let heading = event.alpha;
    if (heading !== null) {
      // Convert to 0-360 range
      heading = (360 - heading) % 360;
      this.currentHeading = heading;
      this.updateDisplay();
    }
  }
  
  updateStatus(message) {
    if (this.statusDiv) {
      this.statusDiv.textContent = message;
    }
  }
  
  applyToHouseDirection() {
    const houseDirectionSelect = document.getElementById('huong-nha');
    if (houseDirectionSelect) {
      const currentSector = this.getCurrentSector();
      const directionMap = {
        'Bắc': 'Bắc',
        'Đông Bắc': 'Đông Bắc', 
        'Đông': 'Đông',
        'Đông Nam': 'Đông Nam',
        'Nam': 'Nam',
        'Tây Nam': 'Tây Nam',
        'Tây': 'Tây',
        'Tây Bắc': 'Tây Bắc'
      };
      
      const mappedDirection = directionMap[currentSector.direction];
      if (mappedDirection) {
        houseDirectionSelect.value = mappedDirection;
        this.updateStatus(`Đã chọn hướng nhà: ${mappedDirection}`);
      }
    }
  }
}

// Initialize SVG Compass when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  if (document.getElementById('compass-needle')) {
    window.svgCompass = new SVGCompass();
    
    // Set up button event listeners
    const startBtn = document.getElementById('btn-compass-start');
    const stopBtn = document.getElementById('btn-compass-stop');
    const applyBtn = document.getElementById('btn-compass-apply');
    
    if (startBtn) {
      startBtn.addEventListener('click', () => window.svgCompass.start());
    }
    
    if (stopBtn) {
      stopBtn.addEventListener('click', () => window.svgCompass.stop());
    }
    
    if (applyBtn) {
      applyBtn.addEventListener('click', () => window.svgCompass.applyToHouseDirection());
    }
  }
});
