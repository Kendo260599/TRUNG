// PDF Export functionality using pdfmake
// Wait for pdfMake to be available
(function() {
  'use strict';
  
  // Check if pdfMake is available
  if (typeof pdfMake === 'undefined') {
    console.warn('‚ö†Ô∏è pdfMake not available when loading pdf-export.js');
    // Try to wait for it
    const checkPdfMake = setInterval(() => {
      if (typeof pdfMake !== 'undefined') {
        clearInterval(checkPdfMake);
        console.log('‚úÖ pdfMake now available, initializing PDF export...');
        initializePDFExport();
      }
    }, 100);
    return;
  }
  
  // pdfMake is available, initialize immediately
  initializePDFExport();
  
  function initializePDFExport() {
    console.log('üîÑ Initializing PDF Export with pdfMake...');

class PDFExporter {
  constructor() {
    // ƒê·∫∑t font m·∫∑c ƒë·ªãnh v√† thi·∫øt l·∫≠p ban ƒë·∫ßu
    if (typeof pdfMake !== 'undefined') {
      pdfMake.fonts = {
        Roboto: {
          normal: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf',
          bold: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf',
          italics: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf',
          bolditalics: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf'
        }
      };
      
      // Thi·∫øt l·∫≠p ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh 
      pdfMake.vfs = pdfMake.vfs || {};
    }
  }

  createHeader(text) {
    return {
      text: text,
      style: 'header',
      alignment: 'center',
      margin: [0, 0, 0, 20]
    };
  }

  createSection(title) {
    return {
      stack: [
        {
          text: title,
          style: 'sectionHeader',
          margin: [0, 15, 0, 10]
        }
      ]
    };
  }

  createInfoTable(data) {
    return {
      table: {
        widths: ['30%', '70%'],
        body: Object.entries(data).map(([key, value]) => [
          { text: key, style: 'tableHeader' },
          { text: value || '‚Äî', style: 'tableCell' }
        ])
      },
      layout: {
        hLineWidth: function(i, node) {
          return (i === 0 || i === node.table.body.length) ? 1 : 0.5;
        },
        vLineWidth: function(i, node) {
          return (i === 0 || i === node.table.widths.length) ? 1 : 0.5;
        },
        hLineColor: function(i, node) {
          return (i === 0 || i === node.table.body.length) ? '#aaa' : '#ddd';
        },
        vLineColor: function(i, node) {
          return (i === 0 || i === node.table.widths.length) ? '#aaa' : '#ddd';
        }
      }
    };
  }

  createBulletList(items) {
    return {
      ul: items.map(item => ({
        text: item,
        margin: [0, 5]
      }))
    };
  }

  async addCompassImage() {
    try {
      const compassElement = document.querySelector('#d3-compass-container');
      if (!compassElement) {
        console.warn('Compass container not found, using placeholder');
        return {
          text: 'üß≠ [La b√†n phong th·ªßy s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã khi ph√¢n t√≠ch]',
          style: 'compassPlaceholder',
          alignment: 'center',
          margin: [0, 10, 0, 10]
        };
      }

      const svgElement = compassElement.querySelector('svg');
      if (!svgElement) {
        console.warn('SVG element not found, using placeholder');
        return {
          text: 'üß≠ [La b√†n phong th·ªßy s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã khi ph√¢n t√≠ch]',
          style: 'compassPlaceholder',
          alignment: 'center', 
          margin: [0, 10, 0, 10]
        };
      }

      return new Promise((resolve, reject) => {
        try {
          // Convert SVG to image
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          // Set canvas size
          canvas.width = 600; // Fixed width
          canvas.height = 600; // Fixed height
          
          // Create a temporary image
          const img = new Image();
          const svgData = new XMLSerializer().serializeToString(svgElement);
          const svgBlob = new Blob([svgData], {type: 'image/svg+xml;charset=utf-8'});
          const url = URL.createObjectURL(svgBlob);
          
          img.onload = () => {
            try {
              // Fill background
              ctx.fillStyle = 'white';
              ctx.fillRect(0, 0, canvas.width, canvas.height);
              
              // Draw image
              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
              
              // Convert to PNG
              const pngData = canvas.toDataURL('image/png');
              
              // Clean up
              URL.revokeObjectURL(url);
              
              resolve({
                image: pngData,
                width: 400, // PDF width
                height: 400, // PDF height
                alignment: 'center',
                margin: [0, 10]
              });
            } catch (error) {
              console.error('Error drawing image:', error);
              resolve({
                text: 'üß≠ [L·ªói hi·ªÉn th·ªã la b√†n phong th·ªßy]',
                style: 'compassPlaceholder',
                alignment: 'center',
                margin: [0, 10, 0, 10]
              });
            }
          };

          img.onerror = () => {
            console.error('Error loading SVG as image');
            URL.revokeObjectURL(url);
            resolve({
              text: 'üß≠ [L·ªói t·∫£i la b√†n phong th·ªßy]',
              style: 'compassPlaceholder',
              alignment: 'center',
              margin: [0, 10, 0, 10]
            });
          };
          
          img.src = url;
          
        } catch (error) {
          console.error('Error in compass image generation:', error);
          resolve({
            text: 'üß≠ [L·ªói t·∫°o h√¨nh ·∫£nh la b√†n]',
            style: 'compassPlaceholder',
            alignment: 'center',
            margin: [0, 10, 0, 10]
          });
        }
      });
      
    } catch (error) {
      console.error('Error in addCompassImage:', error);
      return {
        text: 'üß≠ [Kh√¥ng th·ªÉ t·∫£i la b√†n phong th·ªßy]',
        style: 'compassPlaceholder',
        alignment: 'center',
        margin: [0, 10, 0, 10]
      };
    }
  }

  formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }

  async generatePDF(data) {
    try {
      // ƒê·ª£i l·∫•y h√¨nh ·∫£nh la b√†n
      const compassImage = await this.addCompassImage();
      
      const docDefinition = {
        pageSize: 'A4',
        pageOrientation: 'portrait',
        pageMargins: [40, 60, 40, 60],
        footer: function(currentPage, pageCount) {
          return {
            text: `Trang ${currentPage}/${pageCount}`,
            alignment: 'center',
            margin: [0, 30, 0, 0],
            style: 'footer'
          };
        },
        content: [
          // Header v√† ti√™u ƒë·ªÅ
          this.createHeader('B√ÅO C√ÅO PHONG TH·ª¶Y & TH·∫¶N S·ªê H·ªåC'),
          {
            text: `Ng√†y t·∫°o: ${new Date().toLocaleDateString('vi-VN')}`,
            alignment: 'right',
            style: 'date'
          },

          // Th√¥ng tin kh√°ch h√†ng
          this.createSection('TH√îNG TIN KH√ÅCH H√ÄNG'),
          this.createInfoTable({
            'H·ªç v√† t√™n': data.fullName,
            'Ng√†y sinh': data.birthDate,
            'Gi·ªõi t√≠nh': data.gender,
            'S·ªë ƒëi·ªán tho·∫°i': data.phone
          }),

          // Th√¥ng tin b·∫•t ƒë·ªông s·∫£n
          this.createSection('TH√îNG TIN B·∫§T ƒê·ªòNG S·∫¢N'),
          this.createInfoTable({
            'T·ªânh/Th√†nh': data.province,
            'Ph∆∞·ªùng/X√£': data.ward,
            'ƒê·ªãa ch·ªâ': data.addressDetail,
            'Gi√°': data.price ? this.formatCurrency(data.price) : '‚Äî',
            'ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß': data.fullAddress
          }),

          // La b√†n phong th·ªßy
          this.createSection('LA B√ÄN PHONG TH·ª¶Y'),
          compassImage,
          this.createInfoTable({
            'H∆∞·ªõng nh√†': data.houseDirection,
            'Cung m·ªánh': data.destinyPosition
          }),

          // Th·∫ßn s·ªë h·ªçc
          this.createSection('PH√ÇN T√çCH TH·∫¶N S·ªê H·ªåC'),
          this.createInfoTable({
            'S·ªë ch·ªß ƒë·∫°o': data.destinyNumber,
            'S·ªë linh h·ªìn': data.soulNumber,
            'S·ªë bi·ªÉu ƒë·∫°t': data.expressionNumber
          }),
          {
            text: data.numerologyAnalysis,
            style: 'analysis',
            margin: [0, 10, 0, 10]
          },

          // Ph√¢n t√≠ch phong th·ªßy
          this.createSection('PH√ÇN T√çCH PHONG TH·ª¶Y'),
          {
            text: data.fengShuiAnalysis,
            style: 'analysis',
            margin: [0, 10, 0, 10]
          },

          // Khuy·∫øn ngh·ªã
          this.createSection('KHUY·∫æN NGH·ªä & L∆ØU √ù'),
          this.createBulletList(data.recommendations),

          // Ch·ªØ k√Ω
          {
            text: 'Ch·ªØ k√Ω t∆∞ v·∫•n vi√™n',
            style: 'signatureLabel',
            margin: [0, 30, 0, 50],
            alignment: 'right'
          }
        ],
        
        // ƒê·ªãnh nghƒ©a styles
        styles: {
          header: {
            fontSize: 20,
            bold: true,
            color: '#c41e3a'
          },
          sectionHeader: {
            fontSize: 14,
            bold: true,
            color: '#1e40af',
            decoration: 'underline'
          },
          tableHeader: {
            bold: true,
            color: '#1e40af',
            fontSize: 11
          },
          tableCell: {
            fontSize: 11
          },
          analysis: {
            fontSize: 11,
            lineHeight: 1.4
          },
          compassPlaceholder: {
            fontSize: 12,
            color: '#666',
            italics: true
          },
          date: {
            fontSize: 11,
            color: '#666',
            italics: true
          },
          footer: {
            fontSize: 9,
            color: '#666'
          },
          signatureLabel: {
            fontSize: 11,
            color: '#666',
            italics: true
          }
        },
        
        // Default font
        defaultStyle: {
          font: 'Roboto'
        }
      };

      // T·∫°o v√† t·∫£i PDF v·ªõi x·ª≠ l√Ω l·ªói
      return new Promise((resolve, reject) => {
        try {
          const pdfDoc = pdfMake.createPdf(docDefinition);
          
          pdfDoc.download('phong-thuy-than-so-hoc.pdf', () => {
            console.log('PDF downloaded successfully');
            resolve(true);
          }, (error) => {
            console.error('Error downloading PDF:', error);
            reject(error);
          });

        } catch (error) {
          console.error('Error in PDF generation:', error);
          reject(new Error('Kh√¥ng th·ªÉ t·∫°o file PDF: ' + error.message));
        }
      });

    } catch (error) {
      console.error("Error generating PDF:", error);
      throw new Error("C√≥ l·ªói khi t·∫°o file PDF: " + error.message);
    }
  }
  // Helper method to create bullet list
  createBulletList(items) {
    if (!items || items.length === 0) {
      return {
        text: 'Kh√¥ng c√≥ khuy·∫øn ngh·ªã ƒë·∫∑c bi·ªát.',
        style: 'analysis'
      };
    }
    
    return {
      ul: items.map(item => ({
        text: item,
        margin: [0, 2]
      })),
      style: 'analysis'
    };
  }
}

// Global function to trigger PDF export
async function exportToPDF() {
  try {
    console.log('üîÑ Starting PDF export process...');
    
    const pdfExporter = new PDFExporter();
    
    // Prepare data for PDF
    const data = {
      fullName: document.getElementById('kh-ten')?.value || "Ch∆∞a c√≥ th√¥ng tin",
      birthDate: document.getElementById('ngay-sinh')?.value || "Ch∆∞a c√≥ th√¥ng tin", 
      gender: document.getElementById('gioi-tinh')?.value || "Ch∆∞a c√≥ th√¥ng tin",
      phone: document.getElementById('kh-phone')?.value || "Ch∆∞a c√≥ th√¥ng tin",
      destinyNumber: document.getElementById('life-path-number')?.innerText || "Ch∆∞a c√≥",
      soulNumber: document.getElementById('soul-number')?.innerText || "Ch∆∞a c√≥",
      expressionNumber: document.getElementById('expression-number')?.innerText || "Ch∆∞a c√≥",
      numerologyAnalysis: document.getElementById('numerology-content')?.innerText || "Ch∆∞a c√≥ ph√¢n t√≠ch",
      houseDirection: document.getElementById('huong-nha')?.value || "Ch∆∞a ch·ªçn",
      destinyPosition: document.getElementById('compass-trigram')?.innerText || "Ch∆∞a c√≥",
      fengShuiAnalysis: document.getElementById('result-content')?.innerText || "Ch∆∞a c√≥ ph√¢n t√≠ch",
      // Th√¥ng tin BƒêS
      province: document.getElementById('bd-province')?.value || "",
      ward: document.getElementById('bd-ward')?.value || "",
      addressDetail: document.getElementById('bd-address-detail')?.value || "",
      price: document.getElementById('bd-price')?.value || "",
      fullAddress: document.getElementById('bd-full-address')?.innerText || "",
      // Get recommendations from feng shui issues checkboxes
      recommendations: Array.from(document.querySelectorAll('#issues-container input[type="checkbox"]:checked'))
        .map(cb => cb.parentElement.textContent.trim()) || []
    };
    
    console.log('üìä Collected data for PDF:', data);
    
    // Show loading state
    const exportBtn = document.getElementById('btn-export-pdf');
    if (exportBtn) {
      const originalText = exportBtn.innerHTML;
      exportBtn.innerHTML = '<span class="animate-spin">üîÑ</span> ƒêang xu·∫•t PDF...';
      exportBtn.disabled = true;

      try {
        console.log('üèóÔ∏è Generating PDF...');
        await pdfExporter.generatePDF(data);
        
        // Show success message
        exportBtn.innerHTML = '<span>‚úÖ</span> ƒê√£ xu·∫•t PDF';
        setTimeout(() => {
          exportBtn.innerHTML = originalText;
          exportBtn.disabled = false;
        }, 2000);
        
        console.log('‚úÖ PDF export completed successfully');
        
      } catch (error) {
        console.error("‚ùå Error in PDF generation:", error);
        exportBtn.innerHTML = originalText;
        exportBtn.disabled = false;
        throw error;
      }
    } else {
      // No button found, just generate PDF
      console.log('üèóÔ∏è Generating PDF (no button found)...');
      await pdfExporter.generatePDF(data);
      console.log('‚úÖ PDF export completed successfully');
    }
    
  } catch (error) {
    console.error("‚ùå Error in exportToPDF:", error);
    alert("C√≥ l·ªói khi xu·∫•t file PDF. Vui l√≤ng ki·ªÉm tra c√°c th√¥ng tin ƒë√£ nh·∫≠p v√† th·ª≠ l·∫°i.");
    throw error;
  }
}

// Make classes and functions globally available
window.PDFExporter = PDFExporter;
window.exportToPDF = exportToPDF;

console.log('‚úÖ PDF Export initialized successfully!');
  } // end initializePDFExport
})(); // end IIFE
